<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" creationComplete="init(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import Events.DownloaderToMainEvent;
			
			import air.net.URLMonitor;
			
			import com.adobe.serialization.json.*;
			
			import components.gif.player.GIFPlayer;
			
			import entities.Book;
			import entities.HTTPURLLoader;
			
			import flash.events.StatusEvent;
			import flash.net.URLRequest;
			import flash.system.MessageChannel;
			import flash.system.MessageChannelState;
			import flash.system.Worker;
			import flash.system.WorkerDomain;
			import flash.system.WorkerState;
			import flash.utils.ByteArray;
			
			import mx.controls.Alert;
			import mx.controls.ProgressBar;
			import mx.controls.ProgressBarMode;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			
			[Bindable]public var _width: Number = 400;
			[Bindable]public var _height: Number = 300;
			
			[Bindable]public var applicationPath: String;
			
			[Bindable]private var containerWidth: Number = 359;
			
			private var player: GIFPlayer = new GIFPlayer();
			
			private static const API_URL: String = "http://api.linden.pro";
			private var email: String = "kurtulus@linden-tech.com";
			private var password: String = "123456";
			
			private var token: String;
			
			private var monitor: URLMonitor;
			private var loader: HTTPURLLoader;	
			private var urlLoader: URLLoader;
			
			public var books: Array;
			public var selectedBooks: Array;
			public var booksInDisk: Array;
			
			public var currentBookID: Number;
			public var currentBook: Object;
			
			private var borderContainer: BorderContainer = new BorderContainer();
			private var progressBar: ProgressBar = new ProgressBar();
			
			private var canExit: Boolean = true;
			private var updated: Boolean = false;
			
			public function init(e: Event): void {
				try {
					var request: URLRequest = new URLRequest();
					this.loader = new HTTPURLLoader();
					
					this.loader.addEventListener("complete", onLoginComplete);
					this.loader.addEventListener("ioError", onIOError);
					request = new URLRequest();
					request.url = SyncView.API_URL + "/user-login?email="+this.email+"&password="+this.password;
					request.method = URLRequestMethod.GET;
					
					this.loader.load( request );
					
				}catch(e: *){
					FlexGlobals.topLevelApplication.createMessage( "Hata oldu", MessageView.ERROR );
				}
			}
			
			private function onIOError(e: Event): void {
				FlexGlobals.topLevelApplication.createMessage( "İnternet bağlantısı yok", MessageView.ERROR );
			}
			
			private function onLoginComplete(e: Event): void {
				try {
					var str: String = "";
					var result: Object;
					
					str = HTTPURLLoader(e.target).data;
					result = com.adobe.serialization.json.JSON.decode( str );
					
					this.token = result.token;
					
					if( this.token == null || this.token == "") {
						FlexGlobals.topLevelApplication.createMessage( "Hata oldu", MessageView.ERROR );
						return;
					}
					
					var file: File = File.applicationDirectory;
					var fileStream: FileStream = new FileStream();
					
					file = file.resolvePath( "organization.txt" );
					
					fileStream.open( file, FileMode.READ );
					var organization: String = fileStream.readUTFBytes( file.size );
					fileStream.close();
					
					var request: URLRequest = new URLRequest();
					this.loader = new HTTPURLLoader();
					
					this.loader.addEventListener("complete", onComplete);
					request = new URLRequest();
					request.url = SyncView.API_URL + "/book?filter[publisherID]=" + organization + "&token="+this.token;
					request.method = URLRequestMethod.GET;
					
					this.loader.load( request );
				}catch(e: *) {
					FlexGlobals.topLevelApplication.createMessage( "Hata oldu", MessageView.ERROR );
				}
			}
			
			private function onComplete(e: Event): void {
				try {
					var str: String = "";
					var result: Object;
					
					str = HTTPURLLoader(e.target).data;
					result = com.adobe.serialization.json.JSON.decode( str );
					
					this.books = new Array();
					// download organization books
					for(var i: Number = 0; i < result.books.length; i++) {
						var resObj: Object = result.books[i];
						var obj: Object = new Object();
						
						obj.id = resObj.ID;
						obj.title = resObj.title;
						obj.publisher = "Seviye yayıncılık";
						obj.image = "http://api.linden.pro/book-cover/" + resObj.ID +"?width=92";
						
						if( this.isAlreadyInDisk( obj.id ) ) {
							continue;
						}
						obj.selected = false;
						
						var syncBookView: SyncBookView = new SyncBookView();
						this.container.addElement( syncBookView );
						
						syncBookView.book = obj;
						
						this.books.push( obj );
						
						syncBookView._width = this.containerWidth - this.scroller.verticalScrollBar.width;
						syncBookView._height = 130;
					}
					this.body.visible = true;
					
				}catch(e: Error) {
					
				}
			}
			
			public function onCloseClick(e: Event): void {
				if( this.canExit ) {
					if( this.updated ) {
						FlexGlobals.topLevelApplication.dispatchEvent(new Event("sync-update"));
					}else {
						FlexGlobals.topLevelApplication.dispatchEvent(new Event("sync-close"));
					}
				}
			}
			
			public function onStartDownload(e: MouseEvent): void {
				e.stopImmediatePropagation();
				
				if( !this.canExit ) {
					FlexGlobals.topLevelApplication.createMessage( "İndirme işlemi devam ediyor", MessageView.INFO );
					return;
				}
				
				this.selectedBooks = new Array();
				
				for each(var book: Object in this.books ) {
					if( book.selected ) {
						this.selectedBooks.push( book.id );		
					}
				}
				
				if( this.selectedBooks.length ) {
					//this.download( );
					
					this.addElement( this.borderContainer );
					
					this.borderContainer.width = 400;
					this.borderContainer.height = 100;
					
					this.borderContainer.x = ( this._width - this.borderContainer.width ) / 2;
					this.borderContainer.y = ( this._height - this.borderContainer.height ) / 2;
					
					this.borderContainer.visible = false;
					
					this.borderContainer.addElement( this.progressBar );
					
					this.progressBar.mode = ProgressBarMode.MANUAL;
					this.progressBar.minimum = 0;
					this.progressBar.maximum = 100;
					
					this.progressBar.width = 200;
					
					this.progressBar.x = ( this.borderContainer.width - this.progressBar.width ) / 2;
					this.progressBar.y = ( this.borderContainer.height - this.progressBar.height ) / 2;
					
					this.startDownload();
					
				}
			}
			
			private function startDownload(): void {
				
				try {

					this.currentBookID = this.selectedBooks.pop();
					this.currentBook = this.getCurrentBook( this.currentBookID );
					
					var request: URLRequest = new URLRequest();
					
					var fileRef1: FileReference = new FileReference();
					
					var file: File = new File(File.applicationDirectory.nativePath + "/books" );
					
					file.addEventListener(Event.COMPLETE, onDownloadComplete);
					file.addEventListener(IOErrorEvent.IO_ERROR, onDownloadIOError);
					file.addEventListener(ProgressEvent.PROGRESS, onProgress);
					file.addEventListener(Event.CANCEL, onDownloadComplete);
					
					//request.url = "http://github.com/mozilla/pdf.js/zipball/master";
					request.url = "http://download.linden.pro/encryptedBook." + this.currentBookID + ".dat";
					request.method = URLRequestMethod.GET;
					
					//trace( this.currentBookID + " download started." );
					
					
					this.progressBar.setProgress(0 , 100);
					this.progressBar.label = this.currentBook.title;
					
					this.borderContainer.visible = true;
					
					// start download
					file.download(request);
					
					this.canExit = false;
					
				}catch(e: Error) {
					//trace( e.message );
				}
			}
			
			private function startDownloadItems(): void {
				try {
					
					var request: URLRequest = new URLRequest();
					
					var fileRef1: FileReference = new FileReference();
					
					var file: File = new File(File.applicationDirectory.nativePath + "/books" );
					
					file.addEventListener(Event.COMPLETE, onDownloadItemsComplete);
					file.addEventListener(IOErrorEvent.IO_ERROR, onDownloadIOError);
					file.addEventListener(ProgressEvent.PROGRESS, onProgress);
					file.addEventListener(Event.CANCEL, onDownloadItemsComplete);
					
					//request.url = "http://github.com/mozilla/pdf.js/zipball/master";
					request.url = "http://download.linden.pro/encryptedItems." + this.currentBookID + ".dat";
					request.method = URLRequestMethod.GET;
					
					//trace( this.currentBookID + " download items started." );
					
					this.progressBar.setProgress(0 , 100);
					this.progressBar.label = this.currentBook.title + " bileşenler";
					
					this.borderContainer.visible = true;
					
					// start download
					file.download(request);
					
					this.canExit = false;
					
				}catch(e: Error) {
					FlexGlobals.topLevelApplication.createMessage( "Hata oldu", MessageView.ERROR );
				}
			}
			
			private function getCurrentBook( id: Number ): Object {
				
				for(var i: Number = 0; i < this.books.length; i++ ) {
					if( this.books[i].id == id ) {
						return this.books[i];
					}
				}
				return new Object();
			}
			
			private function download(): void {
				
				try {
					
					for each( var id: Number in this.selectedBooks ) {
						// only one file can be downloaded at a time.
					}				
					
				}catch(e: Error) {
					//trace( e.message );
				}
			}
			
			private function onDownloadIOError(e: IOErrorEvent): void {
				//trace( "download io error: " + e.text );
				FlexGlobals.topLevelApplication.createMessage( "Hata oldu", MessageView.ERROR );
				this.borderContainer.visible = false;
				
				if( this.selectedBooks.length ) {
					this.startDownload();
				} else {
					this.canExit = true;	
				}
			}
			
			private function onProgress(e: ProgressEvent): void {
				var percentLoaded:Number= e.bytesLoaded / e.bytesTotal * 100;
				this.progressBar.setProgress(percentLoaded, 100);
				//this.progressBar.setProgress( e.bytesLoaded, e.bytesTotal + e.bytesLoaded );
			}
			
			private function httpResponseStatus(e: HTTPStatusEvent): void {
				//trace("http status event: " + e.status );
			}
			
			private function onDownloadComplete(e: Event): void {
				try {
					//trace( this.currentBookID + " download completed" );
					//var fr: File = e.currentTarget as File;
					this.canExit = true;
					this.updated = true;
					this.borderContainer.visible = false;
					
					this.startDownloadItems();
				}catch(e: *) {
					FlexGlobals.topLevelApplication.createMessage( "Hata oldu", MessageView.ERROR );
				}
			}
			
			private function onDownloadItemsComplete(e: Event): void {
				//trace( this.currentBookID + " download items completed" );
				//var fr: File = e.currentTarget as File;
				
				this.borderContainer.visible = false;
				this.canExit = true;
				this.updated = true;
				if ( this.selectedBooks.length ){
					this.startDownload();
				} else {
					this.removeElement( this.borderContainer );
				}
			}
			
			private function isAlreadyInDisk( id: Number ): Boolean {
				for each( var book: Book in this.booksInDisk) {
					if( book.ID == id) {
						return true;
					}
				}
				return false;
			}
			
			private function stopPropagation(e: MouseEvent): void {
				e.stopImmediatePropagation();
			}
			
		]]>
	</fx:Script>
	<s:BorderContainer id="body" visible="false" width="{ this._width }" click="onCloseClick(event)" height="{ this._height }" backgroundColor="#000000" backgroundAlpha="0.5">
		
		<s:BorderContainer click="stopPropagation(event)" borderWeight="0" borderVisible="false" id="topLine" backgroundColor="#F1C40F" 
						   width="{ this.containerWidth }" height="10" 
						   x="{ ( this._width - this.containerWidth ) / 2 }" y="{ this._height * 0.25 - this.topLine.height }">
		</s:BorderContainer>
		
		<s:Scroller id="scroller" verticalScrollPolicy="on" click="stopPropagation(event)"
					width="{ this.containerWidth }" height="{ this._height * 0.5 }" 
					x="{ ( this._width - this.containerWidth ) / 2 }" y="{ this._height * 0.25 }">
			<s:Group id="group" width="{ this.containerWidth }" height="{ this._height * 0.5 }"
					 x="{ ( this._width - this.containerWidth ) / 2 }" y="{ this._height * 0.25 }">
				<!--
				<s:Rect id="rect" width="{ this.containerWidth - this.scroller.verticalScrollBar.width }" height="{ this._height * 0.5 }" x="{ 0 }" y="0">
					<s:fill><s:SolidColor color="#E2E2E2" /></s:fill>
				</s:Rect>
				-->
				<s:VGroup id="container" gap="0">
					
				</s:VGroup>
			</s:Group>
		</s:Scroller>
		
		<s:BorderContainer borderWeight="0" borderVisible="false" id="buttonContainer" 
						   width="{ this.containerWidth }"
						   x="{ ( this._width - this.containerWidth ) / 2 }" y="{ this._height * 0.75 }">
			<s:Image click="onStartDownload(event)" source="{ this.applicationPath + '/Assets/downloadbuttons.png' }">
				
			</s:Image>
		</s:BorderContainer>
		
	</s:BorderContainer>
</s:Group>
