<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="{ this._width }" height="{ this._height }" initialize="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			
			[Bindable]public var _width: Number = 400;
			[Bindable]public var _height: Number = 50;
			
			[Bindable]public var _x: Number =
				( FlexGlobals.topLevelApplication.display.FullWidth - 400 ) / 2;
			
			[Bindable]public var _y: Number = -50;
				//( FlexGlobals.topLevelApplication.display.FullHeight - 100 ) / 2;
			
			[Bindable]public var message: String = "";
			[Bindable]public var type: String = "success";
			
			public static const SUCCESS: String = "success";
			public static const ERROR: String = "error";
			public static const INFO: String = "info";
			
			public var time: Number = 2000;
			
			public function init(): void {
				switch( this.type ) {
					case MessageView.SUCCESS:
						this.container.setStyle("backgroundColor", "#8DC63F");
						break;
					case MessageView.ERROR:
						this.container.setStyle("backgroundColor", "#BE1E2D");
						break;
					case MessageView.INFO:
						this.container.setStyle("backgroundColor", "#00AEEF");
						break;
					default:
						this.container.setStyle("backgroundColor", "#555555");
						break;
				}
			}
			
			public function show( fade: Boolean = false): void {
				
				if( fade ) {
					this._y = -50;
					this.container.visible = true;
					this.fadeIn(500);	
				} else {
					this._y = 0;
					this.container.visible = true;
					this.fadeInFinished();
				}
				
				//this.fadeInFinished();
			}
			
			public function onClick(e: Event): void {
				e.stopImmediatePropagation();
				
				FlexGlobals.topLevelApplication.dispatchEvent(new Event("message view close"));
			}
			
			public function fadeIn(time: Number): void {
				if( time == 0 ) {
					this.fadeInFinished();
				} else {
					this.container.y += 2;
					var self: Object = this;
					setTimeout( function(): void {
						self.fadeIn( time - 20 );
					}, 20);
				}
			}
			
			private function fadeInFinished(): void {
				setTimeout( function(): void {
					FlexGlobals.topLevelApplication.dispatchEvent(new Event("message view close"));
				}, this.time);
			}
			
		]]>
	</fx:Script>
	
	<mx:Tile
		id="container"
		visible="false"
		tileWidth="{ this._width }" tileHeight="{ this._height }"
		x="{ this._x }" y="{ this._y }"
		horizontalAlign="center"
		verticalAlign="middle"
		backgroundAlpha="0.8"
		click="onClick(event)">
		<s:Label text="{ this.message }" color="#FFFFFF" fontSize="20"> 
			
		</s:Label>
	</mx:Tile>
</s:Group>
