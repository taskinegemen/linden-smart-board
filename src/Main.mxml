<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   initialize="init()" 
					   applicationComplete="applicationCompleted()"
					   showStatusBar="false"
					   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import Basic.Api;
			
			import Events.*;
			
			import Views.BookView;
			import Views.ChapterView;
			import Views.CropView;
			import Views.DrawingView;
			
			import com.nocircleno.graffiti.tools.FillBucketTool;
			
			import entities.*;
			import entities.DisplayStackConstants;
			import entities.Library;
			
			import flash.display.Stage;
			import flash.utils.*;
			
			import mx.controls.Alert;
			
			import spark.components.BorderContainer;
			import spark.components.Image;
			import spark.components.Label;
			import spark.skins.spark.ImageSkin;
			
			// variables
			public var display:DisplayStack;
			public var api:Api;
			public var library: Library;
			public var currentBook:String;
			public var currentPage:Number;
			public var currentThumbnails:Array;
			
			public var books: Array;
			public var book: Book;
			public var page: Page;
			public var outlines: Array;

			private function applicationCompleted(): void{
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
				this.display = new DisplayStack();
				this.api = new Api();
				this.library = new Library();
				
				// add event handlers
				//this.addEventListener("book-reading-finished", fillLibrary);
				this.addEventListener(BookClickEvent.BOOK_CLICKED, showBookView);
				this.addEventListener("close clicked", closeApplication);
				this.addEventListener("search-view clicked", showSearchView);
				this.addEventListener("back-to-library", backToLibrary);
				
				this.addEventListener("crop-click", initializeCropView);
				
				this.display.FullHeight = this.stage.height;
				this.display.FullWidth = this.stage.width;
				
				this.addElement(this.display);
				
				// get library
				this.library.readBooks();
				
				this.books = new Array(this.library.getBookCount());
				this.books = this.library.getBooks();
				
				setTimeout(this.eben, 1000);
				
				this.addEventListener("library-ready", fillLibrary);
			}
			
			// triviri function to show loading view
			// just delete when the time comes
			private function eben(): void{
				this.display.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;	
			}
			
			// close application
			private function closeApplication(e:Event): void {
				this.exit();
			}
			
			private function showSearchView(e: Event): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.SEARCH_VIEW_INDEX;
			}
			
			private function showBookView(e: BookClickEvent): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.PAGE_VIEW_INDEX;
				
				this.page = null;
				this.bindBookPages(e.book);
				if(this.display.tableOfContents == null){
					this.addEventListener("tableofcontents-ready", this.bindBookOutlines);
				}else{
					this.bindBookOutlines(null);
				}
				
				
				if(this.display.pageView == null) {
					this.addEventListener("page-view-ready", this.pageViewReady);
				} else {
					this.setFirstPage();
				}
			}			
			
			private function bindBookPages(book: Book): void {
				this.book = book;
			}
			
			private function bindBookOutlines(e: Event): void {
				this.outlines = this.book.outlines;
				if(this.outlines == null){
					this.outlines = new Array();
				}
				
				this.display.tableOfContents.chapterArea.removeAllElements();
				
				for each(var outline: Outline in this.outlines) {
					var label: Label = new spark.components.Label();
					
					label.text = outline.title;
					label.setStyle("color", "#FFFFFF");
					label.setStyle("fontSize", 20);
					label.height = 30;
					label.setStyle("paddingTop", 10);
					label.setStyle("paddingLeft", 10);
					label.id = "outline-" + outline.ID;
					
					
					label.addEventListener(MouseEvent.CLICK, this.outlineClicked);
					
					this.display.tableOfContents.chapterArea.addElement(label);
				}
			}
			
			private function pageViewReady(e: Event): void {
				
				// bind event handlers, these handlers for bottom menu
				
				this.display.bottomMenu.addEventListener(PagePaletteClickEvent.LEFT_CLICKED, this.previousPage);
				this.display.bottomMenu.addEventListener(PagePaletteClickEvent.RIGHT_CLICKED, this.nextPage);
				this.display.bottomMenu.addEventListener(PagePaletteClickEvent.OUTLINE_CLICKED, this.bookOutline);
				
				this.setFirstPage();
			}
			
			private function setFirstPage(): void{
				this.page = this.book.getFirstPage();
				this.display.pageView.source = this.page.image;
				
				this.display.pageView.height = this.page.height;
				this.display.pageView.width = this.display.FullWidth;
				
			}
			
			private function nextPage(e: Event): void {
				var nextPageNumber: Number = this.page.pageNo + 1;
				this.page = this.book.getPage( nextPageNumber );
				this.display.pageView.source = this.page.image;
				
				this.display.pageView.height = this.page.height;
				this.display.pageView.width = this.display.FullWidth;
			}
			
			private function previousPage(e: Event): void {
				var previousPageNumber: Number = this.page.pageNo - 1;
				this.page = this.book.getPage( previousPageNumber );
				this.display.pageView.source = this.page.image;
				
				this.display.pageView.height = this.page.height;
				this.display.pageView.width = this.display.FullWidth;
			}
			
			private function bookOutline(e: Event): void {
				this.display.tableOfContents._parent = this.display;
				this.display.tableOfContents.mainHeight = this.display.FullHeight;
				this.display.tableOfContents.mainWidth = this.display.FullWidth;
				
				this.display.tableOfContents.y = this.display.page.verticalScrollPosition;
				
				this.display.tableOfContents.visible = true;
			}
			
			private function outlineClicked(e: MouseEvent): void {
				var label: Label = e.target as Label;
				
				var children: Number = this.display.tableOfContents.chapterArea.numChildren;
				for(var i: Number = 0; i < children; i++) {
					var _label:Label = this.display.tableOfContents.chapterArea.getElementAt(i) as Label;
					_label.setStyle("backgroundColor", "#1B2630");
				}
				
				label.setStyle("backgroundColor", "#FF00FF");
				
				var id: Number = label.id.split('-')[1];
				
				this.setOutlinePages(id);
			}
			
			private function setOutlinePages(outlineId: Number): void {
				var arr: Array = this.book.getOutlinePages(outlineId);
				
				this.display.tableOfContents.thumbnailArea.removeAllElements();
				
				for each(var page: Object in arr) {
					var border: BorderContainer = new BorderContainer();
					
					var img: Image = new Image();
					
					img.source = page.image;
					
					img.height = 210;
					img.width = 150;
					
					img.setStyle("paddingTop", 2);
					img.setStyle("paddingBottom", 2);
					
					img.id = "outline-page-" + page.pageNo;
					
					img.addEventListener(MouseEvent.CLICK, this.outlinePageClicked);
					
					border.addElement(img);
					
					var label: Label = new Label();
					
					label.x = img.width - 40;
					label.y = img.height - 20;
					label.height = 20;
					label.width = 40;
					label.text = page.pageNo;
					
					label.setStyle("backgroundColor", "#1b2630");
					label.setStyle("color", "#FFFFFF");
					label.setStyle("paddingLeft", 5);
					label.setStyle("paddingTop", 5);
					label.setStyle("textAlign", "center");
					
					border.addElement(label);
					
					this.display.tableOfContents.thumbnailArea.addElement(border);
				}
				
			}
			
			private function outlinePageClicked(e: MouseEvent): void {
				var image: Image = e.target as Image;
				var imageSkin: ImageSkin = e.target as ImageSkin;
				
				if(image == null){
					image = imageSkin.parent as Image;
				}
				
				var pageNo: Number = image.id.split('-')[2];
				this.page = this.book.getPage(pageNo);
				this.display.pageView.source = this.page.image;
				
				this.display.tableOfContents.visible = false;
			}
			
//			private function changeToBookStack(e:BookClickEvent){
//					this.display.mainStack.selectedIndex = DisplayStackConstants.PAGE_VIEW_INDEX;
//					//todo get last page state of book
//					this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
//					this.currentBook = e.bookId.toString();
//					this.currentPage = 1
//					this.api.getPage(e.bookId.toString(),this.currentPage,this.display.FullWidth-20);
//					this.api.addEventListener(GetThumbnailsResultEvent.GET_THUMBNAILS_SUCCESS,thumbnailsInitialized);
//					this.api.getThumbnailsOfBook(this.currentBook);
//					
//			}
			
			private function thumbnailsInitialized(ev:GetThumbnailsResultEvent): void{
				this.currentThumbnails = ev.thumbnails;
				this.display.totalThumbnails = ev.thumbnails.length;
			}

			
			private function backwardPage(ev:Event): void{
				
				if(this.currentPage > 1){
					this.currentPage--;
					this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
					this.api.getPage(this.currentBook,this.currentPage,this.display.FullWidth-20);
				}
			}
			
			public function changePage(ev:MouseEvent): void{
				this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
				this.api.getPage(this.currentBook,ev.currentTarget.id,this.display.FullWidth-20);
			}
			
			private function showOutline(ev:Event): void{
				this.api.addEventListener(GetBookResultEvent.GET_BOOK_SUCCESS,bookDataInited);
				this.api.getBook(this.currentBook);
				this.display.showTableOfContents();
			}
			
			private function bookDataInited(ev:GetBookResultEvent): void{
				this.display.addChapters(ev.chapters);
			}
			
			private function pageDataInited(ev:GetPageResultEvent): void{
				
				this.display.setPage(ev.pageUrl);
				this.display.addItems(ev.items);
				this.api.removeEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
				
			}
			
			private function forwardPage(ev:Event): void{
				this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
				this.currentPage++;
				this.api.getPage(this.currentBook,this.currentPage,this.display.FullWidth-20);
			}
			
			private function authorizeUser(ev:LoginButtonClickEvent): void{
				//this.api = new Api(ev.email,ev.password);
				this.api = new Api();
				api.getToken();
				this.api = api;
//				this.api.addEventListener(LoginResultEvent.LOGIN_SUCCESS,loginSucess);
//				this.api.addEventListener(LoginResultEvent.LOGIN_FAIL,loginFail);
			}

			
//			private function loginSucess(ev:LoginResultEvent){
//				this.display.mainStack.selectedIndex = ;
//				this.api.getLibrary();
//				this.api.addEventListener(GetLibraryResultEvent.GET_LIBRARY_SUCCESS,fillLibrary);
//			}
			
			private function fillLibrary(ev:Event): void{
				for each(var book: Book in this.books) {
					var bookView: BookView = new BookView();
					
					bookView.book = book;
					
					this.display.booksArea.addElement(bookView);
				}
			}
			
			private function loginFail(ev:LoginResultEvent): void{
//				this.api.getLibrary();
			}
			
			private function init(): void{
				
			}
			
			public function backToLibrary(e: Event): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;
			}
			
			public var cropView: CropView;
			public function initializeCropView(e: Event): void {
				this.addEventListener("crop-view-ready", this.cropViewReady);
				this.cropView = new CropView();
				
				this.cropView._width = this.display.pageView.sourceWidth;
				this.cropView._height = this.display.pageView.sourceHeight;
				
				this.cropView.x = 
					Math.ceil((this.display.pageView.width - this.display.pageView.sourceWidth) / 2);
				
				this.addElement(this.cropView);
			}
			
			public function cropViewReady(e: Event): void {
				this.cropView.cropCanvasElement.setStyle("backgroundColor", "#FFFFFF");
				this.cropView.cropCanvasElement.setStyle("backgroundAlpha", "0");
				
				this.addEventListener(CropRectangleEvent.CROP_FINISHED, this.cropFinished);
			}
			
			
			public var drawingView: DrawingView;
			public var croppedImage: BitmapData;
			public function cropFinished(e: CropRectangleEvent): void {
				this.removeElement(this.cropView);
				
				// crop image
				var pageScrollPositionX: Number = this.display.page.horizontalScrollPosition;
				var pageScrollPositionY: Number = this.display.page.verticalScrollPosition;
				
				var sourceRect: Rectangle = 
					new Rectangle(e.pointStart.x + pageScrollPositionX, e.pointStart.y + pageScrollPositionY, e.pointEnd.x - e.pointStart.x, e.pointEnd.y - e.pointStart.y);
				this.croppedImage = new BitmapData(sourceRect.width, sourceRect.height, true);
				
				this.croppedImage.copyPixels(this.display.pageView.bitmapData, sourceRect, new Point(0, 0));
				
				this.addEventListener("drawing-view-ready", this.drawingViewReady);
				
				this.drawingView = new DrawingView();
				
				this.drawingView._width = this.display.FullWidth;
				this.drawingView._height = this.display.FullHeight;
				
				this.drawingView.croppedImageWidth = sourceRect.width;
				this.drawingView.croppedImageHeight = sourceRect.height;
				
				this.addElement(this.drawingView);
			}
			
			public function drawingViewReady(e: Event): void {
				this.addEventListener("drawing-view-close", this.drawingViewClose);
				this.drawingView.croppedImage.source = this.croppedImage;
				//Alert.show("drawing view ready");
			}
			
			public function drawingViewClose(e: Event): void {
				this.removeElement(this.drawingView);
			}
		]]>
		
		
		
	</fx:Script>

</s:WindowedApplication>
