<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   initialize="init()" 
					   applicationComplete="applicationCompleted()"
					   showStatusBar="false"					   
					   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import Basic.Api;
			
			import Events.*;
			
			import Views.BookView;
			import Views.ChapterView;
			import Views.CropView;
			import Views.DrawingView;
			import Views.DrawingsView;
			import Views.LoadingView;
			import Views.MessageView;
			import Views.SyncView;
			import Views.ZoomView;
			
			import com.nocircleno.graffiti.tools.FillBucketTool;
			
			import entities.*;
			import entities.DisplayStackConstants;
			import entities.Library;
			
			import flash.display.Stage;
			import flash.utils.*;
			
			import mx.controls.Alert;
			
			import spark.components.BorderContainer;
			import spark.components.Group;
			import spark.components.Image;
			import spark.components.Label;
			import spark.skins.spark.ImageSkin;
			
			// variables
			public var display:DisplayStack;
			public var api:Api;
			public var library: Library;
			public var currentBook:String;
			public var currentPage:Number;
			public var currentThumbnails:Array;
			
			public var books: Array;
			public var book: Book;
			public var page: Page;
			public var chapters: Array;
			public var items: Array;

			private var pageResolution: Number = Page._640;
			
			public var pageViewY: Number = 0;
			
			[Bindable]public var applicationPath: String;
			
			private function applicationCompleted(): void{
				
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
				this.display = new DisplayStack();
				this.addElement(this.display);
				this.library = new Library();
				
				this.applicationPath = File.applicationDirectory.nativePath;
				this.display.applicationPath = this.applicationPath;
				
				// add event handlers
				//this.addEventListener("book-reading-finished", fillLibrary);
				this.addEventListener(BookClickEvent.BOOK_CLICKED, showBookView);
				this.addEventListener("close clicked", closeApplication);
				this.addEventListener("search-view clicked", showSearchView);
				this.addEventListener("back-to-library", backToLibrary);
				
				this.addEventListener("crop-click", initializeCropView);
				this.addEventListener("show drawings menu", this.showDrawingsMenu);
				this.addEventListener(ZoomClickEvent.ZOOM_IN, this.zoomInClick);
				this.addEventListener(ZoomClickEvent.ZOOM_OUT, this.zoomOutClick);
				this.addEventListener("item-view-close", this.itemViewClose);
				this.addEventListener("item-view-ready", this.display.itemViewReady);
				
				this.addEventListener("sync-clicked", this.openSyncView);
				this.addEventListener("sync-close", this.closeSyncView);
				this.addEventListener("sync-update", this.updateLibraryView);
				
				this.addEventListener("error-crop-view", this.errorCropView);
				
				this.addEventListener(PagePaletteClickEvent.LEFT_CLICKED, this.previousPage);
				this.addEventListener(PagePaletteClickEvent.RIGHT_CLICKED, this.nextPage);
				this.addEventListener(PagePaletteClickEvent.CHAPTERS_CLICKED, this.bookChapters);
				
				this.addEventListener(DrawingSaveEvent.DRAWING_SAVE, this.saveDrawing);
				this.addEventListener(DrawingSaveEvent.DRAWING_UPDATE, this.updateDrawing);
				this.addEventListener(DrawingSaveEvent.DRAWING_SHARE, this.shareDrawing);
				
				this.display.FullHeight = this.stage.height;
				this.display.FullWidth = this.stage.width;
				
				
				if( this.stage.width < 1280 ) {
					this.pageResolution = Page._640;
				}else if( this.stage.width < 1920 ) {
					this.pageResolution = Page._1280;
				} else {
					this.pageResolution = Page._1920;
				}
				
				// get library
				var self: Object = this;
				setTimeout( function(): void {
					self.library.readBooks();
					self.books = new Array(self.library.getBookCount());
					self.books = self.library.getBooks();
					
					self.display.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;
					self.addEventListener("library-ready", fillLibrary);
				}, 1000);
			}
			
			// close application
			private function closeApplication(e:Event): void {
				this.exit();
			}
			
			private function showSearchView(e: Event): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.SEARCH_VIEW_INDEX;
			}
			
			private var loadingView: LoadingView;
			private function showBookView(e: BookClickEvent): void {
				var self: Object = this;
				
				self.page = null;
				
				self.bindBookPages(e.book);
				
				this.loadingView = new LoadingView();
				
				this.loadingView.visible = false;
				
				this.addElement( this.loadingView );
				
				this.loadingView._width = this.display.FullWidth;
				this.loadingView._height = this.display.FullHeight;
				
				this.loadingView.applicationPath = this.applicationPath;
				
				setTimeout( function(): void {
					self.loadingView.visible = true;
					
					self.loadingView.loadingImage.x = ( self.loadingView._width - self.loadingView.loadingImage.sourceWidth ) / 2;
					self.loadingView.loadingImage.y = ( self.loadingView._height - self.loadingView.loadingImage.sourceHeight ) / 2;
				}, 500);
				
				setTimeout( function(): void {
					self.display.mainStack.selectedIndex = DisplayStackConstants.PAGE_VIEW_INDEX;
					
					
					if( self.display.pageView == null ) {
						self.addEventListener("page-view-ready", self.pageViewReady);
					} else {
						self.setFirstPage();
					}
					
					if( self.display.tableOfContents == null){
						self.addEventListener("tableofcontents-ready", self.bindBookChapters);
					}else{
						self.bindBookChapters(null);
					}
				}, 500);
				
			}
			
			private function bindBookPages(book: Book): void {
				this.book = book;
			}
			
			private function bindBookChapters(e: Event): void {
				
				this.chapters = this.book.chapters;
				if(this.chapters == null){
					this.chapters = new Array();
				}
				
				this.display.tableOfContents.chapterArea.removeAllElements();
				
				for each(var chapter: Chapter in this.chapters) {
					var label: Label = new spark.components.Label();
					
					label.text = chapter.title.length > 30 ? chapter.title.substr(0, 30) + ' ...' : chapter.title;
					label.setStyle("color", "#FFFFFF");
					label.setStyle("fontSize", 20);
					label.height = 30;
					label.setStyle("paddingTop", 10);
					label.setStyle("paddingLeft", 10);
					label.id = "chapter-" + chapter.ID;
					label.width = this.display.tableOfContents.chapterArea.width;
					
					label.addEventListener(MouseEvent.CLICK, this.chapterClicked);
					
					this.display.tableOfContents.chapterArea.addElement(label);
				}
				
				
			}
			
			private function pageViewReady(e: Event): void {
				
				this.setFirstPage();
			}
			
			private function setFirstPage(): void {
				
				this.removeElement( this.loadingView );
				
				this.page = this.book.getFirstPage( this.pageResolution );
				this.display.pageView.source = this.page.image;
				
				this.display.pageView.height = this.page.height;
				this.display.pageView.width = this.display.FullWidth;				
				
				this.adjustPage();
				
				// page items
				this.bindPageItems();
			}
			
			private function nextPage(e: Event): void {				
				
				var self: Object = this;
				setTimeout( function(): void {
					var nextPageNumber: Number = self.page.pageNo + 1;
					self.page = self.book.getPage( nextPageNumber, self.pageResolution );
					
					self.display.pageView.source = self.page.image;
					
					self.display.pageView.height = self.page.height;
					self.display.pageView.width = self.display.FullWidth;
					
					self.adjustPage();
					
					// page items
					self.bindPageItems();
				}, 200);
				
			}
			
			private function previousPage(e: Event): void {
				
				var self: Object = this;
				setTimeout( function(): void {
					
					var previousPageNumber: Number = self.page.pageNo - 1;
					self.page = self.book.getPage( previousPageNumber, self.pageResolution );
					self.display.pageView.source = self.page.image;
					
					self.display.pageView.height = self.page.height;
					self.display.pageView.width = self.display.FullWidth;
					
					self.adjustPage();
					
					// page items
					self.bindPageItems();
				}, 200);
				
				
			}
			
			private function adjustPage(): void {
				var f: Number = ( this.display.FullHeight - this.display.pageView.height );
				var y: Number = (f < 0) ? 0 : (f / 2);
				
				this.pageViewY = y;
				this.display.pageView.y = this.pageViewY;
			}
			
			private function bindPageItems(): void {
				// bind page items
				this.display.addItems( this.page.items );
			}
			
			private function bookChapters(e: Event): void {
				this.display.tableOfContents._parent = this.display;
				this.display.tableOfContents.mainHeight = this.display.FullHeight;
				this.display.tableOfContents.mainWidth = this.display.FullWidth;
				
				this.display.tableOfContents.y = this.display.page.verticalScrollPosition;
				
				this.display.tableOfContents.visible = true;
			}
			
			private function chapterClicked(e: MouseEvent): void {
				this.createMessage( "Sayfalar getiriliyor", MessageView.INFO );
				
				var self: Object = this;
				setTimeout( function(): void {
					var label: Label = e.target as Label;
					
					var children: Number = self.display.tableOfContents.chapterArea.numChildren;
					for(var i: Number = 0; i < children; i++) {
						var _label:Label = self.display.tableOfContents.chapterArea.getElementAt(i) as Label;
						_label.setStyle("backgroundColor", "#1B2630");
					}
					
					label.setStyle("backgroundColor", "#B8BBD9");
					
					var id: Number = label.id.split('-')[1];
					
					self.setChapterPages(id);
				}, 200);
				
			}
			
			private function setChapterPages(chapterId: Number): void {
				var arr: Array = this.book.getChapterPages(chapterId);
				
				this.display.tableOfContents.thumbnailArea.removeAllElements();
				
				for each(var page: Object in arr) {
					var border: BorderContainer = new BorderContainer();
					
					var img: Image = new Image();
					
					img.source = page.image;
					
					img.height = 210;
					img.width = 150;
					
					img.setStyle("paddingTop", 2);
					img.setStyle("paddingBottom", 2);
					
					img.id = "chapter-page-" + page.pageNo;
					
					img.addEventListener(MouseEvent.CLICK, this.chapterPageClicked);
					
					border.addElement(img);
					
					var label: Label = new Label();
					
					label.x = img.width - 40;
					label.y = img.height - 20;
					label.height = 20;
					label.width = 40;
					label.text = page.pageNo;
					
					label.setStyle("backgroundColor", "#1b2630");
					label.setStyle("color", "#FFFFFF");
					label.setStyle("paddingLeft", 5);
					label.setStyle("paddingTop", 5);
					label.setStyle("textAlign", "center");
					
					border.addElement(label);
					
					this.display.tableOfContents.thumbnailArea.addElement(border);
				}
				
			}
			
			private function chapterPageClicked(e: MouseEvent): void {
				this.createMessage( "Sayfa getiriliyor" );
				
				var self: Object = this;
				setTimeout( function(): void {
					var image: Image = e.target as Image;
					var imageSkin: ImageSkin = e.target as ImageSkin;
					
					if(image == null){
						image = imageSkin.parent as Image;
					}
					
					var pageNo: Number = image.id.split('-')[2];
					self.page = self.book.getPage(pageNo, self.pageResolution);
					self.display.pageView.source = self.page.image;
					
					self.display.tableOfContents.visible = false;
					
					self.bindPageItems();
				}, 200);
				
			}

			private function fillLibrary(ev:Event): void {
				
				this.display.booksArea.removeAllElements();
				
				for each(var book: Book in this.books) {
					var bookView: BookView = new BookView();
					bookView.book = book;
					
					this.display.booksArea.addElement(bookView);
				}
			}
			
			public function backToLibrary(e: Event): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;
			}
			
			public var cropView: CropView;
			public function initializeCropView(e: Event): void {
				this.createMessage( "Kesim yapabilirsiniz", MessageView.INFO );
				
				this.addEventListener("crop-view-ready", this.cropViewReady);
				
				this.pageScale();
				
				this.cropView = new CropView();
				
				this.cropView._width = this.display.pageView.sourceWidth;
				this.cropView._height = this.display.pageView.sourceHeight;
				
				this.cropView.x = 
					Math.ceil((this.display.pageView.width - this.display.pageView.sourceWidth) / 2);
				
				this.addElement(this.cropView);
			}
			
			public function cropViewReady(e: Event): void {
				this.cropView.cropCanvasElement.setStyle("backgroundColor", "#FFFFFF");
				this.cropView.cropCanvasElement.setStyle("backgroundAlpha", "0");
				
				this.addEventListener(CropRectangleEvent.CROP_FINISHED, this.cropFinished);
			}
			
			
			public var drawingView: DrawingView;
			public var croppedImage: BitmapData;
			public function cropFinished(e: CropRectangleEvent): void {
				this.removeElement(this.cropView);
				
				// crop image
				var pageScrollPositionX: Number = this.display.page.horizontalScrollPosition;
				var pageScrollPositionY: Number = this.display.page.verticalScrollPosition + this.pageViewY;
				
				var sourceRect: Rectangle = 
					new Rectangle(e.pointStart.x + pageScrollPositionX, e.pointStart.y + pageScrollPositionY, e.pointEnd.x - e.pointStart.x, e.pointEnd.y - e.pointStart.y);
				this.croppedImage = new BitmapData(sourceRect.width, sourceRect.height, true);
				
				this.croppedImage.copyPixels(this.display.pageView.bitmapData, sourceRect, new Point(0, 0));
				
				this.addEventListener("drawing-view-ready", this.drawingViewReady);
				
				this.drawingView = new DrawingView();
				
				this.drawingView.edit = false;
				
				this.drawingView._width = this.display.FullWidth;
				this.drawingView._height = this.display.FullHeight;
				
				this.drawingView.applicationPath = this.applicationPath;
				
				this.drawingView.croppedImageWidth = sourceRect.width;
				this.drawingView.croppedImageHeight = sourceRect.height;
				
				this.addElement(this.drawingView);
			}
			
			public function drawingViewReady(e: Event): void {
				this.addEventListener("drawing-view-close", this.drawingViewClose);
				this.drawingView.croppedImage.source = this.croppedImage;
			}
			
			public function drawingViewClose(e: Event): void {
				this.removeElement(this.drawingView);
			}
			
			public function shareDrawing(e: DrawingSaveEvent): void {
				
				var bitmapDataCopy: BitmapData = e.bitmapData.clone();
				
				if ( this.page.saveDrawing(e.bitmapData) ){
					
					var gonulGozu: GonulGozu = new GonulGozu();
					
					gonulGozu.addEventListener(UploadingComplete.COMPLETE, this.uploadingComplete);
					gonulGozu.addEventListener(UploadingComplete.IOERROR, this.uploadingIOError);
					
					gonulGozu.container = this.drawingView;
					gonulGozu.sendImage( this.page.bookID, this.page.pageNo, e.bitmapData );
					
				} else {
					this.createMessage( "Hata oldu!", MessageView.ERROR );
				}			
				
			}
			
			public function saveDrawing(e: DrawingSaveEvent): void {
				
				if (this.page.saveDrawing(e.bitmapData) ){
					
					this.drawingView.cursorManager.removeCursor( this.drawingView.cursorManager.currentCursorID );
					
					this.removeElement( this.drawingView );	
					
					this.createMessage( "Çizim kaydedildi", MessageView.SUCCESS);
				} else {
					this.createMessage( "Hata oldu!", MessageView.ERROR );
				}
			}
			
			private function uploadingComplete(e: UploadingComplete): void {
				if( e.success ) {
					
					this.createMessage( "Paylaşıldı!", MessageView.SUCCESS );
					
					this.drawingView.cursorManager.removeCursor( this.drawingView.cursorManager.currentCursorID );
					
					//this.removeElement( this.drawingView );	
				} else {
					this.createMessage( "Paylaşılamadı!", MessageView.ERROR );
				}
			}
			
			private function uploadingIOError(e: UploadingComplete): void {
				this.createMessage( "İnternet Bağlantısı Yok", MessageView.ERROR );
			}
			
			public function updateDrawing(e: DrawingSaveEvent): void {	
				if( this.page.updateDrawing(e.bitmapData, this.drawingView.editName) ){
					//this.drawingView.cursorManager.removeCursor( this.drawingView.cursorID );
					this.removeElement( this.drawingView );
				} else {
					this.createMessage( "Hata oldu!", MessageView.ERROR );
				}
			}

			public var drawingsView: DrawingsView;
			public function showDrawingsMenu(e: Event): void {
				this.addEventListener("drawings view ready", this.drawingsViewReady);
				
				this.drawingsView = new DrawingsView();
				
				this.drawingsView._width = this.display.FullWidth;
				this.drawingsView._height = this.display.FullHeight;
				
				this.drawingsView.applicationPath = this.applicationPath;
				
				this.addElement(this.drawingsView);
			}
			
			public function drawingsViewReady(e: Event): void {
				this.addEventListener("drawings view close", this.drawingsViewClose);
				this.addEventListener(DrawingsClickEvent.DRAWINGS_CLICK, this.drawingsClick);
				// bind chapters
				if( !this.chapters.length ) return;
				
				var label: Label = this.getDrawingsChapterLabel("all", "Hepsi");
				
				this.drawingsView.chapters.addElement(label);
				
				for each( var obj: Object in this.chapters ){
					label = this.getDrawingsChapterLabel("chapter_" + obj.ID, obj.title);
					this.drawingsView.chapters.addElement(label);
				}
			}
			
			public function drawingsViewClose(e: Event): void {
				this.removeElement(this.drawingsView);				
			}
			
			private function getDrawingsChapterLabel(id: String, text: String): Label {
				var label: Label = new spark.components.Label();
				
				label.id = id;
				label.text = text.length > 20 ? text.substr(0, 20) + " ..." : text;
				label.width = this.drawingsView.chapters.width;
				label.height = 30;
				label.setStyle("fontSize", 20);
				label.setStyle("textAlign", "left");
				label.setStyle("color", "#FFFFFF");
				label.setStyle("paddingTop", 10);
				label.setStyle("paddingLeft", 20);
				
				label.addEventListener(MouseEvent.CLICK, this.drawingsView.onChapterClick);
				
				label.width = this.drawingsView.chapters.width;
				
				return label;
			}
			
			private var zoomView: ZoomView;
			private var zoomOut: Boolean = false;
			public function zoomInClick(e: ZoomClickEvent): void {
				if( this.zoomOut ){
					this.zoomOut = false;
					var self: Object = this;
					setTimeout( function(): void {
						
						self.page  = self.book.getPage( self.page.pageNo, self.pageResolution );
						
						self.display.pageView.source = self.page.image;
						
						self.display.pageView.height = self.page.height;
						self.display.pageView.width = self.display.FullWidth;
						
						self.adjustPage();
						
						// page items
						self.bindPageItems();
					}, 200);
					return;
				}
				var w: Number = 400;
				var h: Number = 400;
				var leftUp: Point = new Point();
				var rightBottom: Point = new Point();
				
				e.point.x -= 50;
				
				if( e.point.x - ( w  / 2) < 0 ) {
					
					leftUp.x = 0;
					rightBottom.x = w;
					
				} else if( e.point.x + ( w / 2 ) > this.display.FullWidth ) {
					
					leftUp.x = this.display.pageView.sourceWidth - w;
					rightBottom.x = this.display.pageView.sourceWidth;
					
				} else {
					
					leftUp.x = e.point.x - ( w  / 2);
					rightBottom.x = e.point.x + ( w / 2 );
					
				}
				
				if( e.point.y - ( h  / 2) < 0 ) {
					
					leftUp.y = 0;
					rightBottom.y = h;
					
				} else if( e.point.y + ( h / 2 ) > this.display.FullHeight ) {
					
					leftUp.y = this.display.FullHeight - h;
					rightBottom.y = this.display.FullHeight;
					
				} else {
					
					leftUp.y = e.point.y - ( h  / 2);
					rightBottom.y = e.point.y + ( h / 2 );
					
				}
				
				var pageScrollPositionX: Number = this.display.page.horizontalScrollPosition;
				var pageScrollPositionY: Number = this.display.page.verticalScrollPosition + this.pageViewY;
				
				var sourceRect: Rectangle = 
					new Rectangle(leftUp.x + pageScrollPositionX, leftUp.y + pageScrollPositionY, rightBottom.x - leftUp.x, rightBottom.y - leftUp.y);
				var image: BitmapData = new BitmapData(sourceRect.width, sourceRect.height, true);
				
				image.copyPixels(this.display.pageView.bitmapData, sourceRect, new Point(0, 0));
				
				this.addEventListener("zoom view close", this.zoomViewClose);
				this.zoomView = new ZoomView();
				
				this.zoomView._width = this.display.FullWidth;
				this.zoomView._height = this.display.FullHeight;				
				
				this.addElement( this.zoomView );
				
				this.zoomView.image.source = image;
				
				this.zoomView.image.width = w * 1.2;
				this.zoomView.image.height = h * 1.2;
				
				this.zoomView.image.scaleX = 1.2;
				this.zoomView.image.scaleY = 1.2;
				
				this.zoomView.image.x = ( this.zoomView._width - this.zoomView.image.width ) / 2;
				this.zoomView.image.y = ( this.zoomView._height - this.zoomView.image.height ) / 2;

			}
			
			public function zoomViewClose(e: Event): void {
				this.removeElement( this.zoomView );
			}
			
			public function zoomOutClick(e: ZoomClickEvent): void {
				//this.createMessage( e.point.x + " " + e.point.y, MessageView.SUCCESS );
				this.zoomOut = true;
				var self: Object = this;
				setTimeout( function(): void {
					
					self.page  = self.book.getPage( self.page.pageNo, Page._640 );
					
					self.display.pageView.source = self.page.image;
					
					self.display.pageView.height = self.page.height;
					self.display.pageView.width = self.display.FullWidth;
					
					self.adjustPage();
					
					// page items
					self.bindPageItems();
				}, 200);
				
			}
			
			public function pageScale(x: Number = 0, y: Number = 0): void {
				if(x == 0 && y == 0){
					this.display.pageView.scaleX = 1.0;
					this.display.pageView.scaleY = 1.0;
				}else{
					this.display.pageView.scaleX += x;
					this.display.pageView.scaleY += y;
				}
				this.pageCenter();
			}
			
			public function pageCenter(): void {
				var xCoordinate:Number = (this.display.page.width - this.display.pageView.width * this.display.pageView.scaleX)/2;
				var yCoordinate:Number = (this.display.page.height - this.display.pageView.height * this.display.pageView.scaleY)/2;
				this.display.pageView.y = 0;
				this.display.pageView.x = 0;
			}
			
			public function drawingsClick(e: DrawingsClickEvent): void {
				
				var strArr: Array = e.drawingInfo.split('_');
				var pageNo: Number = int(strArr[1]);
				var drawingNo: Number = int(strArr[2]);
				
				this.drawingView = new DrawingView();
				
				this.drawingView.edit = true;
				this.drawingView.editName = drawingNo.toString();
				
				this.drawingView._width = this.display.FullWidth;
				this.drawingView._height = this.display.FullHeight;
				
				this.drawingView.applicationPath = this.applicationPath;
				
				this.addEventListener("bitmap read", this.drawingBitmapDataReady);
				
				var _page: Page = this.book.pages[pageNo - 1];
				_page.getDrawing( drawingNo, this.display.FullWidth, this.display.FullHeight );
				
				this.addEventListener("drawing-view-close", this.drawingViewClose);
			}
			
			public function drawingBitmapDataReady(e: Event): void {
				this.drawingView.setBitmapData( this.page.getDrawingBitmap() );
			
				this.addElement(this.drawingView);
			}
			
			public function itemViewClose(e: Event): void {
				this.display.closeItem();
			}
			
			public var syncView: SyncView;
			public function openSyncView(e: Event): void {
				
				this.createMessage( "Güncelleme ekranı açılıyor", MessageView.INFO );
				
				this.syncView = new SyncView();
				this.syncView.booksInDisk = this.books;
				this.syncView._width = this.display.FullWidth;
				this.syncView._height = this.display.FullHeight;
				this.syncView.applicationPath = this.applicationPath;
				
				this.display.addElement( this.syncView );
			}
			
			public function updateLibraryView(e: Event): void {
				
				this.createMessage( "Kitap listesi yenileniyor", MessageView.INFO );
				
				var self: Object = this;
				setTimeout( function(): void {
					self.display.removeElement( self.syncView );
					
					self.library.updateBooks();
					
					self.books = new Array(self.library.getBookCount());
					self.books = self.library.getBooks();
					
					self.fillLibrary(null);
					
				}, 200);
				
				
			}
			
			public function closeSyncView(e: Event): void {
				this.display.removeElement( this.syncView );
			}
			
			private function errorCropView(e: Event): void {
				this.createMessage( "Hata oldu", MessageView.ERROR );
				this.removeElement( this.cropView );
			}
			
			private var messageView: MessageView;
			public function createMessage( message: String, type: String = MessageView.SUCCESS, time: Number = 2000 ): void {
				if( this.messageView != null) {
					this.removeElement( this.messageView );
					this.messageView = null;
				}
				this.messageView = new MessageView();
				
				this.messageView.message = message;
				this.messageView.time = time;
				this.messageView.type = type;
				
				this.addElement( this.messageView );
				
				this.messageView.depth = 1000;
				this.messageView.show();
				
				this.addEventListener("message view close", this.messageViewClose);
			}
			
			public function messageViewClose(e: Event): void {
				if( this.messageView == null ) {
					return;
				}
				this.removeElement( this.messageView );
				this.messageView = null;
				this.removeEventListener("message view close", this.messageViewClose);
			}
			
		]]>
		
		
		
	</fx:Script>

</s:WindowedApplication>
