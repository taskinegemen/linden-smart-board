<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   initialize="init()" 
					   applicationComplete="applicationCompleted()"
					   showStatusBar="false"
					   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import Basic.Api;
			
			import Events.*;
			
			import Views.BookView;
			import Views.ChapterView;
			
			import com.nocircleno.graffiti.tools.FillBucketTool;
			
			import entities.*;
			import entities.DisplayStackConstants;
			import entities.Library;
			
			import flash.display.Stage;
			import flash.utils.*;
			
			import mx.controls.Alert;
			
			// variables
			public var display:DisplayStack;
			public var api:Api;
			public var library: Library;
			public var currentBook:String;
			public var currentPage:Number;
			public var currentThumbnails:Array;
			
			public var books: Array;
			public var book: Book;
			public var page: Page;

			private function applicationCompleted(): void{
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
				this.display = new DisplayStack();
				this.api = new Api();
				this.library = new Library();
				
				// add event handlers
				//this.addEventListener("book-reading-finished", fillLibrary);
				this.addEventListener(BookClickEvent.BOOK_CLICKED, showBookView);
				this.addEventListener("close clicked", closeApplication);
				this.addEventListener("search-view clicked", showSearchView);
				this.addEventListener("back-to-library", backToLibrary);
				
				this.display.FullHeight = this.stage.height;
				this.display.FullWidth = this.stage.width;
				
				this.addElement(this.display);
				
				// get library
				this.library.readBooks();
				
				this.books = new Array(this.library.getBookCount());
				this.books = this.library.getBooks();
				
				this.display.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;
				this.addEventListener("library-ready", fillLibrary);
			}
			
			// close application
			private function closeApplication(e:Event): void {
				this.exit();
			}
			
			private function showSearchView(e: Event): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.SEARCH_VIEW_INDEX;
			}
			
			private function showBookView(e: BookClickEvent): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.PAGE_VIEW_INDEX;
				this.page = null;
				this.bindBookPages(e.book);
				if(this.display.pageView == null) {
					this.addEventListener("page-view-ready", this.pageViewReady);
				}else{
					this.setPage();
				}
			}			
			
			private function bindBookPages(book: Book): void {
				this.book = book;
			}
			
			private function pageViewReady(e: Event): void {
				this.setPage();
			}
			
			private function setPage(_page: Page = null): void{
				if(_page == null){
					this.page = this.book.getFirstPage();
				}else{
					this.page = this.book.getPage(_page.pageNo);
				}
				this.display.pageView.source = this.page.image;
			}
			
//			private function changeToBookStack(e:BookClickEvent){
//					this.display.mainStack.selectedIndex = DisplayStackConstants.PAGE_VIEW_INDEX;
//					//todo get last page state of book
//					this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
//					this.currentBook = e.bookId.toString();
//					this.currentPage = 1
//					this.api.getPage(e.bookId.toString(),this.currentPage,this.display.FullWidth-20);
//					this.api.addEventListener(GetThumbnailsResultEvent.GET_THUMBNAILS_SUCCESS,thumbnailsInitialized);
//					this.api.getThumbnailsOfBook(this.currentBook);
//					
//			}
			
			private function thumbnailsInitialized(ev:GetThumbnailsResultEvent): void{
				this.currentThumbnails = ev.thumbnails;
				this.display.totalThumbnails = ev.thumbnails.length;
			}

			
			private function backwardPage(ev:Event): void{
				
				if(this.currentPage > 1){
					this.currentPage--;
					this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
					this.api.getPage(this.currentBook,this.currentPage,this.display.FullWidth-20);
				}
			}
			
			public function changePage(ev:MouseEvent): void{
				this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
				this.api.getPage(this.currentBook,ev.currentTarget.id,this.display.FullWidth-20);
			}
			
			private function showOutline(ev:Event): void{
				this.api.addEventListener(GetBookResultEvent.GET_BOOK_SUCCESS,bookDataInited);
				this.api.getBook(this.currentBook);
				this.display.showTableOfContents();
			}
			
			private function bookDataInited(ev:GetBookResultEvent): void{
				this.display.addChapters(ev.chapters);
			}
			
			private function pageDataInited(ev:GetPageResultEvent): void{
				this.display.bottomMenu.addEventListener(PagePaletteClickEvent.LEFT_CLICKED,backwardPage);
				this.display.bottomMenu.addEventListener(PagePaletteClickEvent.RIGHT_CLICKED,forwardPage);
				this.display.bottomMenu.addEventListener(PagePaletteClickEvent.OUTLINE_CLICKED,showOutline);
				this.display.setPage(ev.pageUrl);
				this.display.addItems(ev.items);
				this.api.removeEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
				
			}
			
			private function forwardPage(ev:Event): void{
				this.api.addEventListener(GetPageResultEvent.GET_PAGE_SUCCESS,pageDataInited);
				this.currentPage++;
				this.api.getPage(this.currentBook,this.currentPage,this.display.FullWidth-20);
			}
			
			private function authorizeUser(ev:LoginButtonClickEvent): void{
				//this.api = new Api(ev.email,ev.password);
				this.api = new Api();
				api.getToken();
				this.api = api;
//				this.api.addEventListener(LoginResultEvent.LOGIN_SUCCESS,loginSucess);
//				this.api.addEventListener(LoginResultEvent.LOGIN_FAIL,loginFail);
			}

			
//			private function loginSucess(ev:LoginResultEvent){
//				this.display.mainStack.selectedIndex = ;
//				this.api.getLibrary();
//				this.api.addEventListener(GetLibraryResultEvent.GET_LIBRARY_SUCCESS,fillLibrary);
//			}
			
			private function fillLibrary(ev:Event): void{
				for each(var book: Book in this.books) {
					var bookView: BookView = new BookView();
					
					bookView.book = book;
					
					this.display.booksArea.addElement(bookView);
				}
			}
			
			private function loginFail(ev:LoginResultEvent): void{
//				this.api.getLibrary();
			}
			
			private function init(): void{
				
			}
			
			public function backToLibrary(e: Event): void {
				this.display.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;
			}
		]]>
		
		
		
	</fx:Script>

</s:WindowedApplication>
