<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" initialize="init()" xmlns:imagecropper="com.flexblocks.imagecropper.*" xmlns:Views="Views.*" xmlns:containers="com.acj.containers.*"

		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import Events.ChangeViewToBitmapEvent;
			import Events.ChapterViewClickEvent;
			import Events.LoginButtonClickEvent;
			import Events.PagePaletteClickEvent;
			import Events.SwfClickEvent;
			
			import Views.ChapterView;
			import Views.PageMenu;
			import Views.SwfView;
			
			import entities.DisplayStackConstants;
			import entities.Page;
			
			import flash.utils.setTimeout;
			
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.events.ScrollEvent;
			
			import org.osmf.events.TimeEvent;
			
			
			[Embed(source="/Assets/background_login.png")]
			[Bindable]
			public var backgroundLogin:Class;
			[Bindable]public var FullWidth:Number;
			[Bindable]public var FullHeight:Number;
			[Bindable]public var gapSize: Number;
			[Bindable]public var paddingTop: Number;
			[Bindable]public var totalThumbnails: Number;
			
			protected var up:Boolean = false;
			protected var sPosY:Number;
			
			private var _pageMenu: PageMenu = null;
			public var timer: Timer;
			
			public function init(): void{
				this.gapSize = (this.FullWidth - int((this.FullWidth/348))*348)/((int((this.FullWidth/348)))+2)
				this.gapSize = 90;
				this.paddingTop = 50;
				this.addEventListener(ChangeViewToBitmapEvent.IMAGE_CROPPED, changeStackToCrop);
				
				this.mainStack.selectedIndex = DisplayStackConstants.LOADING_VIEW_INDEX;
			}
			
//			protected function onMouseDown(e:MouseEvent): void{
//				this.sPosY = this.contentMouseY;
//				this.startToScroll();
//			}
			
//			protected function onMouseUp(e:MouseEvent): void{
//				this.up = true;
//			}
			
			protected function startToScroll(): void {
					if(!up){
						var direction:Number  =  ((this.sPosY - this.contentMouseY)/this.FullHeight) * 250.0;
						this.scrollerBar.verticalScrollPosition += direction;
						setTimeout(startToScroll,100);
					}else{
						this.up = false;
					}
			}

			protected function initBottomMenu(ev:MouseEvent): void {
				bottomMenu.x = ev.stageX - 100;
				bottomMenu.visible = !bottomMenu.visible;
			}
		
			public function setPage(url:String): void {
				this.pageView.source = url;
			}
				
			public function addChapters(chapters:Array): void {
				for each (var chapter:Object in chapters) {
					var chapterView:ChapterView = new ChapterView();
					chapterView.title = chapter.title;
					chapterView.page = chapter.page;
					chapterView.addEventListener(ChapterViewClickEvent.CHAPTER_CLICKED, changeTableOfContentPage);
					this.addChapter(chapterView);
				}	
			}
				
			public function changeTableOfContentPage(ev:ChapterViewClickEvent): void{
				this.tableOfContents.thumbnailArea.verticalScrollPosition = ev.page * 200;
			}
			
			public function showTableOfContents(): void{
				this.tableOfContents.visible = true;
				this.tableOfContents.x = this.bottomMenu.x+20;
				this.tableOfContents.chapterArea.removeAllElements();
				this.tableOfContents.thumbnailArea.removeAllElements();
				for (var i: Number = 0 ; i<this.totalThumbnails ; i++ ){
					var im:Image = new Image();
					im.source = FlexGlobals.topLevelApplication.currentThumbnails[i];
					im.id = i.toString();
					im.addEventListener(MouseEvent.CLICK,FlexGlobals.topLevelApplication.changePage);
					this.tableOfContents.thumbnailArea.addElement(im);
				}
			}
			
			public function addChapter(chapter:ChapterView): void {
				this.tableOfContents.chapterArea.addElement(chapter);
			}
			
			public function unShowTableOfContentsAndBottomMenu(ev:MouseEvent): void{
				if(cropping){
					if(isFirstClicked){
						secondCoordinate = new Point(ev.stageX, ev.stageY);
						cropping = false;
						isFirstClicked = false;
						var cropRect:Rectangle = new Rectangle(firstCoordinate.x, firstCoordinate.y, secondCoordinate.x-firstCoordinate.x, secondCoordinate.y-firstCoordinate.y);
						var bmpData:BitmapData = new BitmapData(cropRect.width, cropRect.height, true);
						bmpData.copyPixels(pageView.bitmapData, cropRect, new Point(0, 0));
						dispatchEvent(new ChangeViewToBitmapEvent( ChangeViewToBitmapEvent.IMAGE_CROPPED,bmpData));
					}else{
						firstCoordinate = new Point(ev.stageX, ev.stageY);
						isFirstClicked = true;
					}
				}
				this.tableOfContents.visible = false;
				this.bottomMenu.visible = false;
			}
					
			public var cropping:Boolean = false;
			public var isFirstClicked:Boolean = false;
			public var secondCoordinate:Point;
			public var firstCoordinate:Point;
			
			public function startCropping(): void{
				this.cropping = true;	
			}
			
			public function changeStackToCrop(ev:ChangeViewToBitmapEvent): void {
				this.mainStack.selectedIndex = DisplayStackConstants.DRAWING_VIEW_INDEX;
				setTimeout(setCroppedImage,1500,ev.bitmapData);
			}
			
			public function setCroppedImage(im:BitmapData): void{
				
				
			}
			
			public var oldPoint:Point = new Point();
			public var upDrawing:Boolean = false;
			
			protected function onMouseDownDrawing(e:MouseEvent): void{
				this.oldPoint = new Point(e.stageX,e.stageY);
				this.drawLine();
			}
			
			protected function onMouseUpDrawing(e:MouseEvent): void{
				this.upDrawing = true;
			}
			
			protected function drawLine(): void{
				if(!upDrawing){
					this.drawingArea.graphics.lineStyle(2, 0x990000,1);
					this.drawingArea.graphics.beginFill(0x00FF00);
					this.drawingArea.graphics.moveTo(this.oldPoint.x, this.oldPoint.y);
					this.oldPoint.x = this.contentMouseX;
					this.oldPoint.y = this.contentMouseY;
					this.drawingArea.graphics.lineTo(this.oldPoint.x, this.oldPoint.y);
					setTimeout(drawLine,10);
				}else{
					this.upDrawing = false;
				}
				
			}

			public function addItems(items:Array): void{
				for each (var item:Object in items) {
					var swf:SwfView = new SwfView();
					swf.x = item.luX;
					swf.y = item.luY;
					swf.itemId = item.ID;
					swf.itemHeight = item.height;
					swf.itemWidth = item.width;
					swf.addEventListener(SwfClickEvent.SWF_CLICKED,itemClicked);
					this.scrollerBar.addElement(swf);
				}
			}
			
			public function itemClicked(ev:SwfClickEvent): void{
				Alert.show(FlexGlobals.topLevelApplication.api.getItemUrl(ev.swf.itemId));
				var source:String = FlexGlobals.topLevelApplication.api.getItemUrl(ev.swf.itemId);
				this.openTitleWindow(source,ev.swf.itemWidth,ev.swf.itemHeight);
					
			}
			
			
			protected function drawingArea_initializeHandler(event:FlexEvent):void
			{
				this.drawingArea.width = this.FullWidth/2;
				this.drawingArea.height = this.FullHeight/2;
				this.drawingArea.setStyle("borderStyle","solid");
				this.drawingArea.setStyle("borderColor","#000000");
				this.drawingArea.setStyle("borderThickness","5");
				
			}
			import mx.events.CloseEvent;
			import mx.controls.Label;
			import mx.events.FlexEvent;
			import mx.containers.TitleWindow;
			import mx.managers.PopUpManager;
			
			private function openTitleWindow(source:String,width:Number,height:Number):void {

				var tw:TitleWindow = new TitleWindow();
				tw.showCloseButton = true;
				tw.addEventListener(Event.CLOSE, closeTitleWindow);
				var swf:SWFLoader = new SWFLoader();
				swf.source = source;
				swf.width = height;
				swf.height = width;
				tw.addChild(swf);
				PopUpManager.addPopUp(tw, this, true);
				PopUpManager.centerPopUp(tw);
			}

			private function closeTitleWindow(evt:CloseEvent):void {
				PopUpManager.removePopUp(TitleWindow(evt.target));
			}
			
			// dispatch close event
			public function onCloseClick(e: Event): void{
				FlexGlobals.topLevelApplication.dispatchEvent(new Event("close clicked"));
			}
			
			// dispatch search event
			public function onSearchClick(e: Event): void{
				FlexGlobals.topLevelApplication.dispatchEvent(new Event("search-view clicked"));
			}
			
			// return to library
			public function onBackLibrary(e: Event): void {
				this.mainStack.selectedIndex = DisplayStackConstants.LIBRARY_VIEW_INDEX;
			}
			
			// library ready
			public function onLibraryReady(e: Event): void {
				FlexGlobals.topLevelApplication.dispatchEvent(new Event("library-ready"));
			}
			
			// show circular menu on page
			protected function onPageDoubleClick(e: MouseEvent): void {
				this.timer.removeEventListener(TimerEvent.TIMER_COMPLETE, singleClick);
				if(this.timer.running){
					this.timer.stop();
				}				
				
				var children: Number = this.numChildren;
				var skip: Boolean = false;
				for(var i: Number = 0; i < children; i++){
					if( this.getElementAt(i) is PageMenu ){
						skip = true;
					}
				}
				if(!skip){
					this._pageMenu = new PageMenu();	
				}
				
				this._pageMenu._x = e.stageX - (this._pageMenu.width / 2);
				this._pageMenu._y = e.stageY - (this._pageMenu.height / 2);
				
				this._pageMenu._parent = this;
				
				this.addElement(this._pageMenu);
				
			}
			
			// on page click
			public var clickPoint: Point;
			protected function onPageClick(e: MouseEvent): void {
				this.timer = new Timer(200, 1);
				this.timer.addEventListener(TimerEvent.TIMER_COMPLETE, singleClick);
				this.timer.start();
				
				this.clickPoint = new Point(this.contentMouseX, this.contentMouseY);
			}
			
			protected function singleClick(e: TimerEvent): void {
				this.timer.removeEventListener(TimerEvent.TIMER_COMPLETE, singleClick);
				
				var children: Number = this.numChildren;
				
				for(var i: Number = 0; i < children; i++){
					if( this.getElementAt(i) is PageMenu ){
						this.removeElement( this._pageMenu );
					}
				}
				
				this.bottomMenu.visible = false;
				
				if( this.page.height - this.clickPoint.y <= 50 ){
					this.bottomMenu.y = this.page.height + this.page.verticalScrollPosition - 50;
					this.bottomMenu.x = this.clickPoint.x;
					
					if( this.clickPoint.x + this.bottomMenu.width > this.page.width) {
						
						this.bottomMenu.x = this.clickPoint.x - this.bottomMenu.width;
					}
					
					this.bottomMenu.visible = true;
				}
			}

			
			public function onBookViewInit(e: Event): void {
				Alert.show("on book view Init");
			}
			
			public function onPageViewReady(e: Event): void {
				FlexGlobals.topLevelApplication.dispatchEvent(new Event("page-view-ready"));
			}
			
			public function onScrollChange(e: ScrollEvent): void {
				
				this.bottomMenu.visible = false;
			}
			
			
			public var pageChangePoint: Point;
			public var canScroll: Boolean = false;
			public function onMouseDown(e: MouseEvent): void {
				this.pageChangePoint = new Point(this.contentMouseX, this.contentMouseY);
				
				this.canScroll = true;
				
			}
			
			public function onMouseUp(e: MouseEvent): void {
				var newPoint: Point = new Point( this.contentMouseX, this.contentMouseY );
				
				if( this.pageChangePoint.x - newPoint.x < -30) {
					FlexGlobals.topLevelApplication.dispatchEvent(new PagePaletteClickEvent(PagePaletteClickEvent.LEFT_CLICKED));
				}else if( this.pageChangePoint.x - newPoint.x > 30){
					FlexGlobals.topLevelApplication.dispatchEvent(new PagePaletteClickEvent(PagePaletteClickEvent.RIGHT_CLICKED));
				}
				
				this.canScroll = false;
			}
			
			public function onMouseMove(e: MouseEvent): void {
				
				
				
			}
			
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src:url("/Assets/DroidSans.ttf"); 
			fontFamily: DroidSans;
			embedAsCFF: true;
		}
	</fx:Style>
	
	<mx:ViewStack id="mainStack"  width="{this.FullWidth}" height="{this.FullHeight}">
		<mx:Canvas id="loading" width="{this.FullWidth}" height="{this.FullHeight}" x="0" y="0">
			<s:Image id="loadingImage" source="/Assets/loading.png" x="{(this.FullWidth -  this.loadingImage.width) / 2}">
				
			</s:Image>
		</mx:Canvas>
		<mx:Canvas id="library" width="{this.FullWidth}" height="{this.FullHeight}" backgroundColor="#d6d8d8" creationComplete="onLibraryReady(event)">
			<mx:Tile id="booksArea" y="0" paddingTop="{this.paddingTop}"  paddingLeft="{this.gapSize}" paddingRight="{this.gapSize}"  
					 horizontalGap="{this.gapSize}"    minHeight="1" maxWidth="{this.FullWidth}" width="{this.FullWidth}" height="{this.FullHeight-41}">
			</mx:Tile>	
			<s:BorderContainer id="bottomLine" width="{this.FullWidth}" height="41" borderVisible="false" backgroundColor="#1b2630" y="{this.FullHeight - this.bottomLine.height}">
				<s:Image source="/Assets/logoseviye.png" id="logo" x="{(this.FullWidth - this.logo.width)/2}">
					
				</s:Image>
				<s:Image source="/Assets/close.png" id="closeImage" x="{(this.FullWidth - this.closeImage.width)}" click="onCloseClick(event)">
					
				</s:Image>
				<s:Image source="/Assets/search.png" id="searchImage" x="0" click="onSearchClick(event)">
					
				</s:Image>
			</s:BorderContainer>
		</mx:Canvas>
		<mx:Canvas id="page" creationComplete="onPageViewReady(event)" scroll="onScrollChange(event)">
			<s:Scroller id="pageViewScroller"  doubleClick="onPageDoubleClick(event)" doubleClickEnabled="true" click="onPageClick(event)" width="{this.pageView.width}" height="{this.pageView.height}">
				<s:Group  id="scrollerBar">
					<s:Image id="pageView" x="0" y="0" enableLoadingState="true" verticalAlign="middle" horizontalAlign="center" mouseDown="onMouseDown(event)" mouseUp="onMouseUp(event)" mouseMove="onMouseMove(event)">
						
					</s:Image>
				</s:Group>
			</s:Scroller>
			<Views:PagePalette id="bottomMenu" width="{76+76+36}" visible="false">
				
			</Views:PagePalette>
			<Views:TableOfContents visible="false" id="tableOfContents" x="0" y="0" height="{this.FullHeight}">
				
			</Views:TableOfContents>
		</mx:Canvas>
		<mx:Canvas id="drawing">
			<mx:Canvas id="drawingArea" x="0" y="0" initialize="drawingArea_initializeHandler(event)"  mouseDown="onMouseDownDrawing(event)" mouseUp="onMouseUpDrawing(event)" >
			</mx:Canvas>
		</mx:Canvas>
		<mx:Canvas id="searchView">
			<s:BorderContainer width="{this.FullWidth}" height="40" borderVisible="false" backgroundColor="#1b2630">
				<s:Image source="/Assets/seviye-ust-logo.png" x="{(this.FullWidth-this.logo.width) / 2}" >
					
				</s:Image>
				<s:Image source="/Assets/close.png" x="{(this.FullWidth - this.closeImage.width)}" click="onCloseClick(event)">
					
				</s:Image>
				<s:Image source="/Assets/mybooks.png" x="10" click="onBackLibrary(event)">
					
				</s:Image>
			</s:BorderContainer>
		</mx:Canvas>
	</mx:ViewStack>
	
</s:Group>
