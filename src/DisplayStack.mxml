<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" initialize="init()" xmlns:imagecropper="com.flexblocks.imagecropper.*" xmlns:Views="Views.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import Events.ChangeViewToBitmapEvent;
			import Events.ChapterViewClickEvent;
			import Events.LoginButtonClickEvent;
			
			import Views.ChapterView;
			
			import flash.utils.setTimeout;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			[Embed(source="/Assets/background_login.png")]
			[Bindable]
			public var backgroundLogin:Class;
			[Bindable]public var FullWidth:Number;
			[Bindable]public var FullHeight:Number;
			[Bindable]public var gapSize;
			[Bindable]public var paddingTop;
			[Bindable]public var totalThumbnails;
			
			public function dispachLoginButtonClickEvent(){
				var ev:LoginButtonClickEvent = new LoginButtonClickEvent(LoginButtonClickEvent.LOGIN_BUTTON_CLICK,this.email.text,this.pass.text);
				dispatchEvent(ev);
			}
			
			public function init(){
				this.gapSize = (this.FullWidth - int((this.FullWidth/348))*348)/((int((this.FullWidth/348)))+2)
				this.gapSize = 90;
				this.paddingTop = 50;
				this.addEventListener(ChangeViewToBitmapEvent.IMAGE_CROPPED,changeStackToCrop);
			}
			

			
			protected var up:Boolean = false;
			protected var sPosY:Number;

			
			protected function onMouseDown(e:MouseEvent){
				this.sPosY = this.contentMouseY;
				this.startToScroll();
			}
			
			protected function onMouseUp(e:MouseEvent){
				this.up = true;
			}
			
			protected function startToScroll(){
					if(!up){
						var direction:Number  =  ((this.sPosY - this.contentMouseY)/this.FullHeight) * 250.0;
						this.scrollerBar.verticalScrollPosition += direction;
						setTimeout(startToScroll,100);
					}else{
						this.up = false;
					}
					
			}
			
			
				

			
		
			protected function initBottomMenu(ev:MouseEvent){
				bottomMenu.x = ev.stageX-100;
				bottomMenu.visible = true;
			}
		
		
			
			public function setPage(url:String){
				this.pageView.source = url;
			}
			
			
			
			public function addChapters(chapters:Array){
				for each (var chapter:Object in chapters) {
					var chapterView:ChapterView = new ChapterView();
					chapterView.title = chapter.title;
					chapterView.page = chapter.page;
					chapterView.addEventListener(ChapterViewClickEvent.CHAPTER_CLICKED, changeTableOfContentPage);
					this.addChapter(chapterView);
				}	
			}
			
			
			public function changeTableOfContentPage(ev:ChapterViewClickEvent){
				this.tableOfContents.thumbnailArea.verticalScrollPosition = ev.page * 200;
			}
			
			
			public function showTableOfContents(){
				this.tableOfContents.visible = true;
				this.tableOfContents.x = this.bottomMenu.x+20;
				this.tableOfContents.chapterArea.removeAllElements();
				this.tableOfContents.thumbnailArea.removeAllElements();
				for (var i=0 ; i<this.totalThumbnails ; i++ ){
					var im:Image = new Image();
					im.source = FlexGlobals.topLevelApplication.currentThumbnails[i];
					im.id = i;
					im.addEventListener(MouseEvent.CLICK,FlexGlobals.topLevelApplication.changePage);
					this.tableOfContents.thumbnailArea.addElement(im);
				}
				
			}
			
			

			
			
			public function addChapter(chapter:ChapterView){
				this.tableOfContents.chapterArea.addElement(chapter);
			}
			
			
			
			
			public function unShowTableOfContentsAndBottomMenu(ev:MouseEvent){
				if(cropping){
					if(isFirstClicked){
						secondCoordinate = new Point(ev.stageX, ev.stageY);
						cropping = false;
						isFirstClicked = false;
						var cropRect:Rectangle = new Rectangle(firstCoordinate.x, firstCoordinate.y, secondCoordinate.x-firstCoordinate.x, secondCoordinate.y-firstCoordinate.y);
						var bmpData:BitmapData = new BitmapData(cropRect.width, cropRect.height, true);
						bmpData.copyPixels(pageView.bitmapData, cropRect, new Point(0, 0));
						dispatchEvent(new ChangeViewToBitmapEvent( ChangeViewToBitmapEvent.IMAGE_CROPPED,bmpData));
					}else{
						firstCoordinate = new Point(ev.stageX, ev.stageY);
						isFirstClicked = true;
					}
				}
				this.tableOfContents.visible = false;
				this.bottomMenu.visible = false;
			}
			
			
			public var cropping:Boolean = false;
			public var isFirstClicked:Boolean = false;
			public var secondCoordinate:Point;
			public var firstCoordinate:Point;
			
			public function startCropping(){
				this.cropping = true;	
			}
			
			public function changeStackToCrop(ev:ChangeViewToBitmapEvent){
				this.mainStack.selectedIndex = 3;
				setTimeout(setCroppedImage,1500,ev.bitmapData);
			}
			
			public function setCroppedImage(im:BitmapData){
				var canvas:GraffitiCanvas = new GraffitiCanvas(400, 340, 10);
				var img:Image = new Image();
				img.source = im;
				canvas.addChild(img);
				cropp.addChild(canvas);
				var brush:BrushTool = new BrushTool(8, 0xFF0000, 1, 0, BrushType.DIAMOND);
				canvas.activeTool = brush;
			}
			
			import com.nocircleno.graffiti.GraffitiCanvas;
			import com.nocircleno.graffiti.tools.BrushTool;
			import com.nocircleno.graffiti.tools.BrushType;
			
			
			
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src:url("/Assets/DroidSans.ttf"); 
			fontFamily: DroidSans;
			embedAsCFF: true;
		}
		

	</fx:Style>
	
	<mx:ViewStack id="mainStack"  width="{this.FullWidth}" height="{this.FullHeight}">
		<mx:Canvas id="login" width="{this.FullWidth}" height="{this.FullHeight}" >
			<s:BorderContainer  width="{this.FullWidth}" height="{this.FullHeight}" backgroundImage="{backgroundLogin}" backgroundImageFillMode="scale" >
				<s:Group x="{(stage.width/2) -(stage.width/10)}" y="{stage.height*0.40}">
					<s:TextInput borderVisible="false" width="384" id="email" text="burak@linden-tech.com" height="60" fontFamily="DroidSans" fontSize="19" />		
					<s:TextInput borderVisible="false" width="384" id="pass" displayAsPassword="true" y="90"  text="123456"   height="60" fontFamily="DroidSans" fontSize="19" />
					<s:Image width="384" height="70" y="180" source="/Assets/login_button.png" click="this.dispachLoginButtonClickEvent()" >	
					</s:Image>
				</s:Group>
			</s:BorderContainer>
		</mx:Canvas>
		<mx:Canvas id="library" width="{this.FullWidth}" height="{this.FullHeight}" backgroundColor="#d6d8d8" >
			<s:BorderContainer width="{this.FullWidth}" height="60" borderVisible="false" backgroundColor="#1b2630"     >
				<s:Image source="/Assets/logo.png" id="logo" x="{(this.FullWidth-this.logo.width)/2}" >
					
				</s:Image>
			</s:BorderContainer>
			<mx:Tile id="booksArea" y="60" paddingTop="{this.paddingTop}"  paddingLeft="{this.gapSize}" paddingRight="{this.gapSize}"  
					 horizontalGap="{this.gapSize}"    minHeight="1" maxWidth="{this.FullWidth}" width="{this.FullWidth}" height="{this.FullHeight-60}">
				
			</mx:Tile>	
		</mx:Canvas>
		<mx:Canvas id="page">
			<s:Scroller id="bar"  width="{this.pageView.width}" horizontalScrollPolicy="off" verticalScrollPolicy="off" height="{this.FullHeight}"  >
			<s:Group  id="scrollerBar">
				
			
			<s:Image  id="pageView"  enableLoadingState="true"  mouseUp="onMouseUp(event)" click="unShowTableOfContentsAndBottomMenu(event)" mouseDown="onMouseDown(event)"    >
			
			</s:Image>

				
			</s:Group>
			</s:Scroller>
			<s:Button click="startCropping()">
				
			</s:Button>
			<s:BorderContainer width="{this.FullWidth}" height="50" y="{this.FullHeight- 50}" id="bottomArea" borderVisible="false" click="initBottomMenu(event)"  >
				
			</s:BorderContainer>
			<Views:PagePalette y="{this.bottomArea.y+2}" id="bottomMenu" visible="false"  >
				
			</Views:PagePalette>
			<Views:TableOfContents visible="false" id="tableOfContents" x="{(this.FullWidth-500)/2}" y="300">
				
			</Views:TableOfContents>
			<s:Group x="20">
				
			
			<s:BitmapImage  id="cropped"/>
				<mx:Canvas id="test">
					
				</mx:Canvas>
			</s:Group>
		</mx:Canvas>
		<mx:Canvas id= "cropp" >



		</mx:Canvas>
	</mx:ViewStack>
	
</s:Group>
